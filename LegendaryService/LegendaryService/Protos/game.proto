syntax = "proto3";

option csharp_namespace = "LegendaryService";

package Game;

// The Legendary service definition.
service GameService {
	// Get a listing of the available game packages
  rpc GetGamePackages (GetGamePackagesRequest) returns (GetGamePackagesReply);
  rpc CreateGamePackage (CreateGamePackageRequest) returns (CreateGamePackageReply);
  rpc GetAbilities (GetAbilitiesRequest) returns (GetAbilitiesReply);
  rpc CreateAbilities (CreateAbilitiesRequest) returns (CreateAbilitiesReply);
}

message GetGamePackagesRequest {
	repeated GamePackageField fields = 1;
}

	// The response message containing the available base packages
message GetGamePackagesReply {
	Status status = 1;
	repeated GamePackage packages = 2;
}

message CreateGamePackageRequest {
	string name = 1;
	GamePackageType packageType = 2;
	GameBaseMap baseMap = 3;
	string coverImage = 4;
}

message GetAbilitiesRequest {
	repeated AbilityField abilityFields = 1;
	repeated int32 abilityIds = 2;
	repeated string names = 3;
	int32 gamePackageId = 4;
}

message GetAbilitiesReply {
	Status status = 1;
	repeated Ability abilities = 2;
}

message CreateGamePackageReply {
	Status status = 1;
	int32 id = 2;
}

message CreateAbilitiesRequest {
	repeated Ability abilities = 1;
	repeated CreateOptions createOptions = 2;
}

message CreateAbilitiesReply {
	Status status = 1;
	repeated Ability abilities = 2;
}

message GamePackage {
	int32 id = 1;
	string name = 2;
	string coverImage = 3;
	GamePackageType packageType = 4;
	GameBaseMap baseMap = 5;
	repeated Team teams = 6;
	repeated Ally allies = 7;
	repeated Henchman henchmen = 8;
	repeated Adversary adversaries = 9;
	repeated Mastermind masterminds = 10;
	repeated Scheme schemes = 11;
	repeated Neutral neutrals = 12;
	repeated int32 abilitieIds = 13;
}

message Ally {
	string name = 1;
	Team team = 2;
	string requires = 3;
	repeated AllyClass classes = 4;
	repeated Ability abilities = 5;
}

message Henchman {
	string name = 1;
	repeated Ability abilities = 2;
}

message Adversary {
	string name = 1;
	repeated Ability abilities = 2;
}

message Mastermind {
	string name = 1;
	repeated CardRequirement cardRequirements = 2;
	bool hasEpicSide = 3;
	repeated Ability abilities = 4;
}

message Scheme {
	string name = 1;
	repeated SchemeTwistRequirement schemeTwistRequirements = 2;
	repeated CardRequirement cardRequirements = 3;
	repeated Ability abilities = 4;
}

message Neutral {
	string name = 1;
}

message SchemeTwistRequirement {
	int32 playerCount = 1;
	int32 schemeTwistCount = 2;
}

message CardRequirement {
	repeated Ally requiredAllies = 1;
	repeated Henchman requiredHenchmen = 2;
	repeated Adversary requiredAdversaries = 3;
	repeated Mastermind requiredMasterminds = 4;
	repeated Neutral requiredNeutrals = 5;
	int32 additionalAllyCount = 6;
	int32 additionalHenchmanCount = 7;
	int32 additionalAdversaryCount = 8;
	int32 additionalMastermindCount = 9;
	int32 additionalBystanderCount = 10;
	string exactNamedAllyName = 11;
	int32 exactNamedAllyCount = 12;
	repeated Henchman requireSingleHenchman = 13;
}

message Team {
	int32 id = 1;
	string name = 2;
	string imagePath = 3;
}

message Ability {
	int32 id = 1;
	string name = 2;
	string description = 3;
	GamePackage gamePackage = 4;
}

enum AllyClass {
	UnknownAllyClass = 0;
	Covert = 1;
	Strength = 2;
	Tech = 3;
	Ranged = 4;
	Instinct = 5;
}

enum GamePackageType {
	UnknownPackageType = 0;
	BaseGame = 1;
	LargeExpansion = 2;
	SmallExpansion = 3;
}

enum GamePackageField {
	unknownField = 0;
	id = 1;
	name = 2;
	coverImage = 3;
	packageType = 4;
	baseMap = 5;
	allies = 6;
	henchmen = 7; 
	adversaries = 8;
	masterminds = 9;
	schemes = 10;
	neutral = 11;
	abilities = 12;
}

enum GameBaseMap {
	UnknownMap = 0;
	Legendary = 1;
	Villains = 2;
}

enum CreateOptions {
	/// Rather than inform the client of existing duplicates, return an error and perform none of the operation.
	ErrorOnDuplicates = 0;
}

enum AbilityField {
	Id = 0;
	Name = 1;
	Description = 2;
	GamePackageId = 3;
	GamePackageName = 4;
}

message Status {
  // A simple error code that can be easily handled by the client. The
  // actual error code is defined by `google.rpc.Code`.
  int32 code = 1;

  // A developer-facing human-readable error message in English. It should
  // both explain the error and offer an actionable resolution to it.
  string message = 2;

  // Additional error information that the client code can use to handle
  // the error, such as retry delay or a help link.
  repeated string details = 3;
}
syntax = "proto3";

option csharp_namespace = "LegendaryService";

package Game;

// The Legendary service definition.
service GameService {
	// Get a listing of the available game packages
  rpc GetGamePackages (GetGamePackagesRequest) returns (GetGamePackagesReply);
  rpc CreateGamePackage (CreateGamePackageRequest) returns (CreateGamePackageReply);
  rpc GetAbilities (GetAbilitiesRequest) returns (GetAbilitiesReply);
  rpc CreateAbilities (CreateAbilitiesRequest) returns (CreateAbilitiesReply);
  rpc GetTeams (GetTeamsRequest) returns (GetTeamsReply);
  rpc CreateTeams (CreateTeamsRequest) returns (CreateTeamsReply);
  rpc GetClasses (GetClassesRequest) returns (GetClassesReply);
  rpc CreateClasses (CreateClassesRequest) returns (CreateClassesReply);
  rpc GetHenchmen (GetHenchmenRequest) returns (GetHenchmenReply);
  rpc CreateHenchmen (CreateHenchmenRequest) returns (CreateHenchmenReply);
  rpc GetAdversaries (GetAdversariesRequest) returns (GetAdversariesReply);
  rpc CreateAdversaries (CreateAdversariesRequest) returns (CreateAdversariesReply);
  rpc GetNeutrals (GetNeutralsRequest) returns (GetNeutralsReply);
  rpc CreateNeutrals (CreateNeutralsRequest) returns (CreateNeutralsReply);
  rpc GetAllies (GetAlliesRequest) returns (GetAlliesReply);
  rpc CreateAllies (CreateAlliesRequest) returns (CreateAlliesReply);
  rpc GetMasterminds (GetMastermindsRequest) returns (GetMastermindsReply);
  rpc CreateMasterminds (CreateMastermindsRequest) returns (CreateMastermindsReply);
  rpc GetSchemes (GetSchemesRequest) returns (GetSchemesReply);
  rpc CreateSchemes (CreateSchemesRequest) returns (CreateSchemesReply);
}

message GetGamePackagesRequest {
	repeated int32 gamePackageIds = 1;
	string name = 2;
	repeated GamePackageField fields = 3;
}

	// The response message containing the available base packages
message GetGamePackagesReply {
	Status status = 1;
	repeated GamePackage packages = 2;
}

message CreateGamePackageRequest {
	string name = 1;
	GamePackageType packageType = 2;
	GameBaseMap baseMap = 3;
	string coverImage = 4;
}

message GetAbilitiesRequest {
	repeated AbilityField abilityFields = 1;
	repeated int32 abilityIds = 2;
	string name = 3;
	int32 gamePackageId = 4;
}

message GetAbilitiesReply {
	Status status = 1;
	repeated Ability abilities = 2;
}

message CreateGamePackageReply {
	Status status = 1;
	int32 id = 2;
}

message CreateAbilitiesRequest {
	repeated Ability abilities = 1;
	repeated CreateOptions createOptions = 2;
}

message CreateAbilitiesReply {
	Status status = 1;
	repeated Ability abilities = 2;
}

message GetTeamsRequest {
	repeated int32 teamIds = 1;
	string name = 2;
	NameMatchStyle nameMatchStyle = 3;
	repeated TeamField fields = 4;
}

message GetTeamsReply {
	Status status = 1;
	repeated Team teams = 2;
}

message CreateTeamsRequest {
	repeated Team teams = 1;
	repeated CreateOptions createOptions = 2;
}

message CreateTeamsReply {
	Status status = 1;
	repeated Team teams = 2;
}

enum TeamField {
	TeamId = 0;
	TeamName = 1;
	TeamImagePath = 2;
}

message GetClassesRequest {
	repeated int32 classIds = 1;
	string name = 2;
	NameMatchStyle nameMatchStyle = 3;
	repeated ClassField fields = 4;
}

message GetClassesReply {
	Status status = 1;
	repeated Class classes = 2;
}

message CreateClassesRequest {
	repeated Class classes = 1;
	repeated CreateOptions createOptions = 2;
}

message CreateClassesReply {
	Status status = 1;
	repeated Class classes = 2;
}

message Class {
	int32 id = 1;
	string name = 2;
	string imagePath = 3;
}

enum ClassField {
	ClassId = 0;
	ClassName = 1;
	ClassImagePath = 2;
}

message GetHenchmenRequest {
	repeated HenchmanField fields = 1;
	repeated int32 henchmanIds = 2;
	string name = 3;
	NameMatchStyle nameMatchStyle = 4;
}

message GetHenchmenReply {
	Status status = 1;
	repeated Henchman henchmen = 2;
}

message CreateHenchmenRequest {
	repeated Henchman henchmen = 1;
	repeated CreateOptions createOptions = 2;
}

message CreateHenchmenReply {
	Status status = 1;
	repeated Henchman henchmen = 2;
}

enum HenchmanField {
	HenchmanId = 0;
	HenchmanName = 1;
	HenchmanAbilityIds = 2;
	HenchmanGamePackageId = 3;
}

message GetAdversariesRequest {
	repeated AdversaryField fields = 1;
	repeated int32 adversaryIds = 2;
	string name = 3;
	NameMatchStyle nameMatchStyle = 4;
}

message GetAdversariesReply {
	Status status = 1;
	repeated Adversary adversaries = 2;
}

message CreateAdversariesRequest {
	repeated Adversary adversaries = 1;
	repeated CreateOptions createOptions = 2;
}

message CreateAdversariesReply {
	Status status = 1;
	repeated Adversary adversaries = 2;
}

enum AdversaryField {
	AdversaryId = 0;
	AdversaryName = 1;
	AdversaryAbilityIds = 2;
	AdversaryGamePackageId = 3;
}

message GetNeutralsRequest {
	repeated NeutralField fields = 1;
	repeated int32 neutralIds = 2;
	string name = 3;
	NameMatchStyle nameMatchStyle = 4;
}

message GetNeutralsReply {
	Status status = 1;
	repeated Neutral neutrals = 2;
}

message CreateNeutralsRequest {
	repeated Neutral neutrals = 1;
	repeated CreateOptions createOptions = 2;
}

message CreateNeutralsReply {
	Status status = 1;
	repeated Neutral neutrals = 2;
}

enum NeutralField {
	NeutralId = 0;
	NeutralName = 1;
	NeutralGamePackageId = 2;
}

message GetAlliesRequest {
	repeated AllyField fields = 1;
	repeated int32 allyIds = 2;
	string name = 3;
	NameMatchStyle nameMatchStyle = 4;
}

message GetAlliesReply {
	Status status = 1;
	repeated Ally allies = 2;
}

message CreateAlliesRequest {
	repeated Ally allies = 1;
	repeated CreateOptions createOptions = 2;
}

message CreateAlliesReply {
	Status status = 1;
	repeated Ally allies = 2;
}

enum AllyField {
	AllyId = 0;
	AllyName = 1;
	AllyAbilityIds = 2;
	AllyGamePackageId = 3;
	AllyClassInfo = 4;
	AllyTeamId = 5;
}

message GetMastermindsRequest {
	repeated MastermindField fields = 1;
	repeated int32 mastermindIds = 2;
	string name = 3;
	NameMatchStyle nameMatchStyle = 4;
}

message GetMastermindsReply {
	Status status = 1;
	repeated Mastermind masterminds = 2;
}

message CreateMastermindsRequest {
	repeated Mastermind masterminds = 1;
	repeated CreateOptions createOptions = 2;
}

message CreateMastermindsReply {
	Status status = 1;
	repeated Mastermind masterminds = 2;
}

enum MastermindField {
	MastermindId = 0;
	MastermindName = 1;
	MastermindAbilityIds = 2;
	MastermindGamePackageId = 3;
	MastermindCardRequirements = 4;
	MastermindEpicInformation = 5;
}

message GetSchemesRequest {
	repeated SchemeField fields = 1;
	repeated int32 schemeIds = 2;
	string name = 3;
	NameMatchStyle nameMatchStyle = 4;
}

message GetSchemesReply {
	Status status = 1;
	repeated Scheme schemes = 2;
}

message CreateSchemesRequest {
	repeated Scheme schemes = 1;
	repeated CreateOptions createOptions = 2;
}

message CreateSchemesReply {
	Status status = 1;
	repeated Scheme schemes = 2;
}

enum SchemeField {
	SchemeId = 0;
	SchemeName = 1;
	SchemeAbilityIds = 2;
	SchemeGamePackageId = 3;
	SchemeCardRequirements = 4;
	SchemeTwistRequirements = 5;
	SchemeEpicInformation = 6;
}

message GamePackage {
	int32 id = 1;
	string name = 2;
	string coverImage = 3;
	GamePackageType packageType = 4;
	GameBaseMap baseMap = 5;
	repeated Team teams = 6;
	repeated Ally allies = 7;
	repeated Henchman henchmen = 8;
	repeated Adversary adversaries = 9;
	repeated Mastermind masterminds = 10;
	repeated Scheme schemes = 11;
	repeated Neutral neutrals = 12;
	repeated int32 abilityIds = 13;
}

message Ally {
	int32 id = 1;
	string name = 2;
	int32 teamId = 3;
	repeated ClassInfo classes = 4;
	repeated int32 abilityIds = 5;
	int32 gamePackageId = 6;
}

message ClassInfo {
	int32 classId = 1;
	int32 count = 2;
}

message Henchman {
	int32 id = 1;
	string name = 2;
	repeated int32 abilityIds = 3;
	int32 gamePackageId = 4;
}

message Adversary {
	int32 id = 1;
	string name = 2;
	repeated int32 abilityIds = 3;
	int32 gamePackageId = 4;
}

message Mastermind {
	int32 id = 1;
	string name = 2;
	repeated CardRequirement cardRequirements = 3;
	bool hasEpicSide = 4;
	repeated int32 abilityIds = 5;
	int32 gamePackageId = 6;
}

message Scheme {
	int32 id = 1;
	string name = 2;
	repeated SchemeTwistRequirement twistRequirements = 3;
	repeated CardRequirement cardRequirements = 4;
	repeated int32 abilityIds = 5;
	int32 gamePackageId = 6;
	bool hasEpicSide = 7;
}

message Neutral {
	int32 id = 1;
	string name = 2;
	int32 gamePackageId = 3;
}

message SchemeTwistRequirement {
	int32 id = 1;
	int32 playerCount = 2;
	int32 schemeTwistCount = 3;
	bool allowed = 4;
	int32 schemeId = 5;
}

message CardRequirement {
	int32 cardRequirementId = 1;
	CardRequirementType cardRequirementType = 2;
	int32 requiredSetId = 3;
	int32 additionalSetCount = 4;
	string	requiredSetName = 5;
	// NameMatchStyle nameMatchStyle = 6;
	CardSetType cardSetType = 6;
	int32 playerCount = 7;
	int32 ownerId = 8;
}

enum CardRequirementType {
	Unset = 0;
	SpecificRequiredSet = 1;
	AdditionalSetCount = 2;
	NamedSet = 3;
}

enum CardSetType {
	CardSetAdversary = 0;
	CardSetAlly = 1;
	CardSetHenchman = 2;
	CardSetBystander = 3;
	CardSetMastermind = 4;
	CardSetNeutral = 5;
	CardSetScheme = 6;
}

message Team {
	int32 id = 1;
	string name = 2;
	string imagePath = 3;
}

message Ability {
	int32 id = 1;
	string name = 2;
	string description = 3;
	GamePackage gamePackage = 4;
}

enum GamePackageType {
	UnknownPackageType = 0;
	BaseGame = 1;
	LargeExpansion = 2;
	SmallExpansion = 3;
}

enum GamePackageField {
	unknownField = 0;
	id = 1;
	name = 2;
	coverImage = 3;
	packageType = 4;
	baseMap = 5;
	allies = 6;
	henchmen = 7; 
	adversaries = 8;
	masterminds = 9;
	schemes = 10;
	neutral = 11;
	abilities = 12;
}

enum GameBaseMap {
	UnknownMap = 0;
	Legendary = 1;
	Villains = 2;
}

enum CreateOptions {
	/// Rather than inform the client of existing duplicates, return an error and perform none of the operation.
	ErrorOnDuplicates = 0;
}

enum AbilityField {
	Id = 0;
	Name = 1;
	Description = 2;
	GamePackageId = 3;
	GamePackageName = 4;
}

enum NameMatchStyle {
	MixedCase = 0;
	Exact = 1;
	Similar = 2;
}

message Status {
  // A simple error code that can be easily handled by the client. The
  // actual error code is defined by `google.rpc.Code`.
  int32 code = 1;

  // A developer-facing human-readable error message in English. It should
  // both explain the error and offer an actionable resolution to it.
  string message = 2;

  // Additional error information that the client code can use to handle
  // the error, such as retry delay or a help link.
  repeated string details = 3;
}